<!doctype html>
<html>
<head>
	<title>Facebook and Twitter API</title>	
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->        
      <link rel="stylesheet" type="text/css" href="../css/bootstrap.css">
      <link rel="stylesheet" type="text/css" href="../css/bootstrap-theme.css">
      <!-- <link rel="stylesheet" type="text/css" href="../css/custom.css"> -->
      <script type="text/javascript" src="http://x3dom.org/x3dom/dist/x3dom-full.js"></script>
      <link rel="stylesheet" type="text/css" href="http://www.x3dom.org/download/dev/x3dom.css"/>
</head>

<body>


<div id="divPlot"></div>


<script src="https://code.jquery.com/jquery.js"></script>
<script src="../js/bootstrap.js"></script>
<script src="../js/d3.js"></script>
<script src="../js/rickshaw.js"></script>
<script src="../js/3Dplot.js"></script>
<script>

    d3.csv('./csv/tracking.csv', function(d) {
      data = d;

      // contruct the time
      var hours, min, sec, mil;
      var timeString = "";
          timeString += data.Time;
      
      hours = parseInt(timeString.substring(0,2));
      min = parseInt(timeString.substring(3,5));
      sec = parseInt(timeString.substring(6,8));
      mil = parseInt(timeString.substring(9,11));

      var temp = {};

      temp.hours = hours;
      temp.min = min;
      temp.sec = sec;
      temp.mil = mil;

      // console.log(temp);

      // this is true time in miliseconds
      var truetime = 0;
      truetime += hours*36000000;
      truetime += min*60000;
      truetime += sec*1000;
      truetime += mil;

      return {
        time: truetime, 
        // Ankle
        leftAnkleX: +data.AnkleLeftX,
        leftAnkleY: +data.AnkleLeftY,
        leftAnkleZ: +data.AnkleLeftZ,
        rightAnkleX: +data.AnkleRightX,
        rightAnkleY: +data.AnkleRightY,
        rightAnkleZ: +data.AnkleRightZ,
        // Elbow
        leftElbowX: +data.ElbowLeftX,
        leftElbowY: +data.ElbowLeftY,
        leftElbowZ: +data.ElbowLeftZ,
        rightElbowX: +data.ElbowRightX,
        rightElbowY: +data.ElbowRightY,
        rightElbowZ: +data.ElbowRightZ,
         // Foot
        leftFootX: +data.FootLeftX,
        leftFootY: +data.FootLeftY,
        leftFootZ: +data.FootLeftZ,
        rightFootX: +data.FootRightX,
        rightFootY: +data.FootRightY,
        rightFootZ: +data.FootRightZ,
         // Hand
        leftHandX: +data.HandLeftX,
        leftHandY: +data.HandLeftY,
        leftHandZ: +data.HandLeftZ,
        rightHandX: +data.HandRightX,
        rightHandY: +data.HandRightY,
        rightHandZ: +data.HandRightZ,
         // Head
        headX: +data.HeadX,
        headY: +data.HeadY,
        headZ: +data.HeadZ,
         // Hip
        centerHipX: +data.HipCenterX,
        centerHipY: +data.HipCenterY,
        centerHipZ: +data.HipCenterZ,
        leftHipX: +data.HipLeftX,
        leftHipY: +data.HipLeftY,
        leftHipZ: +data.HipLeftZ,
        rightHipX: +data.HipRightX,
        rightHipY: +data.HipRightY,
        rightHipZ: +data.HipRightZ,
         // Knee
        leftKneeX: +data.KneeLeftX,
        leftKneeY: +data.KneeLeftY,
        leftKneeZ: +data.KneeLeftZ,
        rightKneeX: +data.KneeRightX,
        rightKneeY: +data.KneeRightY,
        rightKneeZ: +data.KneeRightZ,
        // Shoulder
        centerShoulderX: +data.ShoulderCenterX,
        centerShoulderY: +data.ShoulderCenterY,
        centerShoulderZ: +data.ShoulderCenterZ,
        leftShoulderX: +data.ShoulderLeftX,
        leftShoulderY: +data.ShoulderLeftY,
        leftShoulderZ: +data.ShoulderLeftZ,
        rightShoulderX: +data.ShoulderRightX,
        rightShoulderY: +data.ShoulderRightY,
        rightShoulderZ: +data.ShoulderRightZ,
         // Head
        spineX: +data.SpineX,
        spineY: +data.SpineY,
        spineZ: +data.SpineZ,
         // Wrist
        leftWristX: +data.WristLeftX,
        leftWristY: +data.WristLeftY,
        leftWristZ: +data.WristLeftZ,
        rightWristX: +data.WristRightX,
        rightWristY: +data.WristRightY,
        rightWristZ: +data.WristRightZ

      };
    }, function(error, response) {
        // let's smooth out some gaps
        var numRows = response.length;

        // set's the tick based on the number of rows
        var increment = Math.floor(numRows*.01);

        /*
         * Empty arrays /objectsfor different portions of data
         *
         * MOTHERJSON STRUCTURE
         *
         * motherJSON = {
         *  bodyPartName: [ 
         *    {x: , y: , z: }, // center is at [0]
         *    {x: , y: , z: }, // left is at [1]
         *    {x: , y: , z: }  // right is at [2]
         *  ], 
         *  bodyPartName2: [
         *    // same as bodyPartName
         *  ], 
         *  // and so on
         *  .
         *  .
         *  .
         * }
         *
         *  EX:
         *  To access the the right z coordinate of a body part
         *
         *  var zCoord = motherJSON.bodyPartName[2].z;
         *
         */
        var motherJSON = {
          "ankle": [],
          "elbow": [],
          "foot": [],
          "hand": [],
          "head": [],
          "hip": [],
          "knee": [],
          "shoulder": [],
          "spine": [],
          "wrist": []
        };
        var coordJSON = { "x": 0, "y": 0, "z": 0 };
        var bodyparts = ["ankle", "elbow", "foot", "hand", "head", 
                         "hip", "knee", "shoulder", "spine", "wrist"];

        // returns the key for motherJSON
        function getBodyPart( curKey ) {
          var bodypart = -1;
          var found = false
          var index;

          for ( var i = 0; i<bodyparts.length; i++) {
            // see which word 
            if( curKey.indexOf(bodyparts[i]) > -1 ) {
              bodypart = bodyparts[i];
              index = curKey.indexOf(bodyparts[i]);
              found = true;
            } 
          }

          if( found ) {
            curKey = curKey.substring(index, index+bodypart.length);
            motherJSON
          } else {
            console.log(curKey + " not found!");
          }

          return curKey;
        }

        // returns center(0), left(1), or right (2)
        function getPosition( curKey ) {

          if( curKey.indexOf("center") > -1) {
            return 0;
          } else if ( curKey.indexOf("left") > -1) {
            return 1;
          } else if ( curKey.indexOf("right") > -1){
            return 2;
          }
          return;
        }

        // returns x, y, or z
        function getCoord( curKey ) {

          if( curKey.indexOf("x") > -1) {
            return "x";
          } else if ( curKey.indexOf("y") > -1) {
            return "y";
          } else if ( curKey.indexOf("z") > -1) {
            return "z";
          }

        }

        

        // the mapping with respect to x,y,z
        var leftAvgX = 0;
        var leftAvgY = 0;
        var leftAvgZ = 0;
        var rightAvgX = 0;
        var rightAvgY = 0;
        var rightAvgZ = 0;


        var cur = 0;

        // loop and map
        for ( var i = 0; i < numRows; i++ ){
          // average the data up until the increment
          for ( var j = 0; j < increment; j++ ) {
            cur = (i*increment) + j;

            if( cur >= numRows ){
              break;
            }

            var selector, position, coord;

            // see where to put the info in the object
            for( var key in response[cur] ) {
              var curKey = key.toLowerCase();
              
              selector = getBodyPart( curKey );
              position = getPosition( curKey );
              coord = getCoord( curKey );

              // console.log(curKey + " at " + position + " with coord " + coord);
              



            }
            // // loop through the keys in one JSON
            // for( var key in response[cur] ) {

            // }

            // leftAvgX += response[cur].leftX;
            // leftAvgY += response[cur].leftY;
            // leftAvgZ += response[cur].leftZ
            // rightAvgX += response[cur].rightX;
            // rightAvgY += response[cur].rightY;

          }

          // average the values
          leftMapping.x = leftAvgX/increment;
          leftMapping.y = leftAvgY/increment;
          rightMapping.x = rightAvgX/increment;
          rightMapping.y = rightAvgY/increment;


          // add it to the array
          // leftData.push(leftMapping);
          // rightData.push(rightMapping);

          // reset everything
          leftMapping = {};
          rightMapping = {};
          leftAvgX = 0;
          leftAvgY = 0;
          rightAvgX = 0;
          rightAvgY = 0;

        }

      // sort the array by time
      // leftData.sort(function(a,b) {
      //   // compare
      //   if( a.time < b.time ) {
      //     return -1;
      //   }
      //   if( a.time > b.time ) {
      //     return 1;
      //   }
      //   return 0;
      // });

      // rightData.sort(function(a,b) {
      //   // compare
      //   if( a.time < b.time ) {
      //     return -1;
      //   }
      //   if( a.time > b.time ) {
      //     return 1;
      //   }
      //   return 0;
      // });
    });

      
  $(document).ready(function(){
      d3.select('#divPlot').style('width', "500px").style('height', "500px")
      scatterPlot3d( d3.select('#divPlot'));
  });


</script>

</body>
</html>

