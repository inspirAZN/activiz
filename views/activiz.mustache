<!doctype html>
<html>
<head>
	<title>Facebook and Twitter API</title>	
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->        
      <link rel="stylesheet" type="text/css" href="../css/bootstrap.css">
      <link rel="stylesheet" type="text/css" href="../css/bootstrap-theme.css">
      <!-- <link rel="stylesheet" type="text/css" href="../css/custom.css"> -->
      <script type="text/javascript" src="http://x3dom.org/x3dom/dist/x3dom-full.js"></script>
      <link rel="stylesheet" type="text/css" href="http://www.x3dom.org/download/dev/x3dom.css"/>
      <link rel="stylesheet" type="text/css" href="../css/styles.css">

</head>

<body>
<nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#">Activity Viz</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <li><a href="/upload">Upload</a></li>
        <li class="active"><a href="#">Visualize</a></li>
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <!-- Show if logged in-->
        <li><a href="#">Welcome {{user}}</a></li>
        <li><a href="/logout">Logout</a></li>
      </ul>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
<div class="container-fluid">
  <div class="col-lg-12">
    <div class="col-lg-3 col-lg-offset-1">
      <div class="panel-group" id="accordion">
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne">
                Compare Participants
              </a>
            </h4>
          </div>
          <div id="collapseOne" class="panel-collapse collapse in">
            <div class="panel-body">
              <ul>
                <li>blah</li>
                <li>blah</li>
                <li>blah</li>
                <li>blah</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwo">
                Annotated Fields
              </a>
            </h4>
          </div>
          <div id="collapseTwo" class="panel-collapse collapse">
            <div class="panel-body">
              Something here
            </div>
          </div>
        </div>
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapseThree">
                Participants
              </a>
            </h4>
          </div>
          <div id="collapseThree" class="panel-collapse collapse">
            <div class="panel-body">
              <ul>
                <li><a href="#">Participant</a></li>
                <li><a href="#">Participant</a></li>
                <li><a href="#">Participant</a></li>
                <li><a href="#">Participant</a></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapse4">
                Color
              </a>
            </h4>
          </div>
          <div id="collapse4" class="panel-collapse collapse">
            <div class="panel-body">
              <ul>
                  <li><a href="#"> Color </a></li>
                  <li><a href="#"> Color </a></li>
                  <li><a href="#"> Color </a></li>
                  <li><a href="#"> Color </a></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapse5">
                Filter
              </a>
            </h4>
          </div>
          <div id="collapse5" class="panel-collapse collapse">
            <div class="panel-body">
              <ul>
                  <li><a href="#"> Filter </a></li>
                  <li><a href="#"> Filter </a></li>
                  <li><a href="#"> Filter </a></li>
                  <li><a href="#"> Filter </a></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapse6">
                Tags
              </a>
            </h4>
          </div>
          <div id="collapse6" class="panel-collapse collapse">
            <div class="panel-body">
              <ul>
                  <li><a href="#"> Tag </a></li>
                  <li><a href="#"> Tag </a></li>
                  <li><a href="#"> Tag </a></li>
                  <li><a href="#"> Tag </a></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapse7">
                Parse Data
              </a>
            </h4>
          </div>
          <div id="collapse7" class="panel-collapse collapse">
            <div class="panel-body">
              <ul>
                  <li><a href="#"> Data </a></li>
                  <li><a href="#"> Data </a></li>
                  <li><a href="#"> Data </a></li>
                  <li><a href="#"> Data </a></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="panel panel-default">
          <div class="panel-heading">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapse8">
                Line Quality
              </a>
            </h4>
          </div>
          <div id="collapse8" class="panel-collapse collapse">
            <div class="panel-body">
              <ul>
                  <li><a href="#"> Acceleration </a></li>
                  <li><a href="#"> Velocity </a></li>
                  <li><a href="#"> Position </a></li>
              </ul>
            </div>
          </div>
        </div>
      </div> <!-- Accordion end -->
    </div>
    <div class="col-lg-4 col-lg-offset-1">
      <div id="divPlot"></div>
    </div>
  </div>
</div>


<script src="https://code.jquery.com/jquery.js"></script>
<script src="../js/bootstrap.js"></script>
<script src="../js/d3.js"></script>
<script src="../js/rickshaw.js"></script>
<script src="../js/3Dplot.js"></script>
<script>

    d3.csv('./csv/tracking.csv', function(d) {
      data = d;

      // contruct the time
      var hours, min, sec, mil;
      var timeString = "";
          timeString += data.Time;
      
      hours = parseInt(timeString.substring(0,2));
      min = parseInt(timeString.substring(3,5));
      sec = parseInt(timeString.substring(6,8));
      mil = parseInt(timeString.substring(9,11));

      var temp = {};

      temp.hours = hours;
      temp.min = min;
      temp.sec = sec;
      temp.mil = mil;

      // console.log(temp);

      // this is true time in miliseconds
      var truetime = 0;
      truetime += hours*36000000;
      truetime += min*60000;
      truetime += sec*1000;
      truetime += mil;

      return {
        time: truetime, 
        // Ankle
        leftAnkleX: +data.AnkleLeftX,
        leftAnkleY: +data.AnkleLeftY,
        leftAnkleZ: +data.AnkleLeftZ,
        rightAnkleX: +data.AnkleRightX,
        rightAnkleY: +data.AnkleRightY,
        rightAnkleZ: +data.AnkleRightZ,
        // Elbow
        leftElbowX: +data.ElbowLeftX,
        leftElbowY: +data.ElbowLeftY,
        leftElbowZ: +data.ElbowLeftZ,
        rightElbowX: +data.ElbowRightX,
        rightElbowY: +data.ElbowRightY,
        rightElbowZ: +data.ElbowRightZ,
         // Foot
        leftFootX: +data.FootLeftX,
        leftFootY: +data.FootLeftY,
        leftFootZ: +data.FootLeftZ,
        rightFootX: +data.FootRightX,
        rightFootY: +data.FootRightY,
        rightFootZ: +data.FootRightZ,
         // Hand
        leftHandX: +data.HandLeftX,
        leftHandY: +data.HandLeftY,
        leftHandZ: +data.HandLeftZ,
        rightHandX: +data.HandRightX,
        rightHandY: +data.HandRightY,
        rightHandZ: +data.HandRightZ,
         // Head
        headX: +data.HeadX,
        headY: +data.HeadY,
        headZ: +data.HeadZ,
         // Hip
        centerHipX: +data.HipCenterX,
        centerHipY: +data.HipCenterY,
        centerHipZ: +data.HipCenterZ,
        leftHipX: +data.HipLeftX,
        leftHipY: +data.HipLeftY,
        leftHipZ: +data.HipLeftZ,
        rightHipX: +data.HipRightX,
        rightHipY: +data.HipRightY,
        rightHipZ: +data.HipRightZ,
         // Knee
        leftKneeX: +data.KneeLeftX,
        leftKneeY: +data.KneeLeftY,
        leftKneeZ: +data.KneeLeftZ,
        rightKneeX: +data.KneeRightX,
        rightKneeY: +data.KneeRightY,
        rightKneeZ: +data.KneeRightZ,
        // Shoulder
        centerShoulderX: +data.ShoulderCenterX,
        centerShoulderY: +data.ShoulderCenterY,
        centerShoulderZ: +data.ShoulderCenterZ,
        leftShoulderX: +data.ShoulderLeftX,
        leftShoulderY: +data.ShoulderLeftY,
        leftShoulderZ: +data.ShoulderLeftZ,
        rightShoulderX: +data.ShoulderRightX,
        rightShoulderY: +data.ShoulderRightY,
        rightShoulderZ: +data.ShoulderRightZ,
         // Head
        spineX: +data.SpineX,
        spineY: +data.SpineY,
        spineZ: +data.SpineZ,
         // Wrist
        leftWristX: +data.WristLeftX,
        leftWristY: +data.WristLeftY,
        leftWristZ: +data.WristLeftZ,
        rightWristX: +data.WristRightX,
        rightWristY: +data.WristRightY,
        rightWristZ: +data.WristRightZ

      };
    }, function(error, response) {
        // let's smooth out some gaps
        var numRows = response.length;

        // set's the tick based on the number of rows
        var increment = Math.floor(numRows*.01);

        // THIS HOLDS EVERYTHING
        var averages = [];
        var motherJSON;

        function resetMother() {


          motherJSON = { 
          "ankle": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }, 
          "elbow": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          },
          "foot": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }, 
          "hand": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          },  
          "head": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }, 
          "hip": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }, 
          "knee": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }, 
          "shoulder": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }, 
          "spine": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }, 
          "wrist": { 
            "where": { 
              "center": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              }, 
              "left": { 
                "at" : {  
                  "x": 0, "y": 0, "z": 0 
                }      
              },
              "right": { 
                "at" : {                  
                  "x": 0, "y": 0, "z": 0 
                }      
              } 
            }
          }
        }


        }


        var bodyparts = ["ankle", "elbow", "foot", "hand", "head", 
                         "hip", "knee", "shoulder", "spine", "wrist"];

        // returns the key for motherJSON
        function getBodyPart( curKey ) {
          var bodypart = -1;
          var found = false;
          var index;

          for ( var i = 0; i<bodyparts.length; i++) {
            // see which word 
            if( curKey.indexOf(bodyparts[i]) > -1 ) {
              bodypart = bodyparts[i];
              index = curKey.indexOf(bodyparts[i]);
              found = true;
            } 
          }

          if( found ) {
            curKey = curKey.substring(index, index+bodypart.length);
          } else {
            return;
          }

          return curKey;
        }

        // returns center, left, or right as strings
        function getPosition( curKey ) {
          // special case for head or spine
          if( curKey.indexOf("head") > -1 || curKey.indexOf("spine") > -1 ){
            return "center";
          }

          // regular cases
          if( curKey.indexOf("center") > -1) {
            return "center";
          } else if ( curKey.indexOf("left") > -1) {
            return "left";
          } else if ( curKey.indexOf("right") > -1){
            return "right";
          }
          return;
        }

        // returns x, y, or z
        function getCoord( curKey ) {

          if( curKey.indexOf("x") > -1) {
            return "x";
          } else if ( curKey.indexOf("y") > -1) {
            return "y";
          } else if ( curKey.indexOf("z") > -1) {
            return "z";
          }

        }

        // used for adding up the values/ finding average
        // pass 1 to divisor if adding/ increment if finding average
        //
        function addValue( someJSON, divisor ) {
            // see where to put the info in the object
            for( var key in someJSON ) {
              var curKey = key.toLowerCase();
              
              selector = getBodyPart( curKey );
              position = getPosition( curKey );
              coord = getCoord( curKey );


              // special case for time
              if(curKey == "time") {
                continue;
              }

              // console.log(curKey);
              // for if you pass motherJSON into someJSON
              // if( !position ) {

              //   var it = motherJSON[selector].where;
              //   var that;
              //   // console.log(motherJSON[selector].where);
              //   var count = 0;
              //   for( var field in it) {
              //     that = it[field];
                  
              //     console.log(that["at"]);

              //   }

              //   // continue;
              // }

            motherJSON[selector].where[position].at[coord] += motherJSON[selector].where[position].at[coord]/divisor;
          }
        }

        // console.log(averages);

        // recursive function used to find average
        function recursiveHelper( json ) {

        }


        // the mapping with respect to x,y,z
        var leftAvgX = 0;
        var leftAvgY = 0;
        var leftAvgZ = 0;
        var rightAvgX = 0;
        var rightAvgY = 0;
        var rightAvgZ = 0;

        var cur = 0;
        var selector, position, coord;
        var tempJSON = {};

        // loop and map
        for ( var i = 0; i < numRows; i++ ){
          // reset everything
          resetMother();

          // average the data up until the increment
          for ( var j = 0; j < increment; j++ ) {
            cur = (i*increment) + j;
            if( cur >= numRows ){
              break;
            }
            // add up all the data
            addValue(response[cur], 1);
          }
          // now we find averages
          // addValue(motherJSON, increment);

          tempJSON = motherJSON;

          // that json now holds averages, push it to the array of averages
          averages.push(tempJSON);

          // when loop restarts, motherJSON will be reset


        }

          console.log(averages);


      // sort the array by time
      // leftData.sort(function(a,b) {
      //   // compare
      //   if( a.time < b.time ) {
      //     return -1;
      //   }
      //   if( a.time > b.time ) {
      //     return 1;
      //   }
      //   return 0;
      // });

      // rightData.sort(function(a,b) {
      //   // compare
      //   if( a.time < b.time ) {
      //     return -1;
      //   }
      //   if( a.time > b.time ) {
      //     return 1;
      //   }
      //   return 0;
      // });
    });

      
  $(document).ready(function(){
      d3.select('#divPlot').style('width', "500px").style('height', "500px")
      scatterPlot3d( d3.select('#divPlot'));
  });


</script>

</body>
</html>

